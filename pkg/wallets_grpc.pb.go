// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wlt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletManagerClient is the client API for WalletManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletManagerClient interface {
	ManagerWallet(ctx context.Context, in *WalletRequest, opts ...grpc.CallOption) (*WalletReply, error)
}

type walletManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletManagerClient(cc grpc.ClientConnInterface) WalletManagerClient {
	return &walletManagerClient{cc}
}

func (c *walletManagerClient) ManagerWallet(ctx context.Context, in *WalletRequest, opts ...grpc.CallOption) (*WalletReply, error) {
	out := new(WalletReply)
	err := c.cc.Invoke(ctx, "/wallet_manager.WalletManager/ManagerWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletManagerServer is the server API for WalletManager service.
// All implementations must embed UnimplementedWalletManagerServer
// for forward compatibility
type WalletManagerServer interface {
	ManagerWallet(context.Context, *WalletRequest) (*WalletReply, error)
	mustEmbedUnimplementedWalletManagerServer()
}

// UnimplementedWalletManagerServer must be embedded to have forward compatible implementations.
type UnimplementedWalletManagerServer struct {
}

func (UnimplementedWalletManagerServer) ManagerWallet(context.Context, *WalletRequest) (*WalletReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManagerWallet not implemented")
}
func (UnimplementedWalletManagerServer) mustEmbedUnimplementedWalletManagerServer() {}

// UnsafeWalletManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletManagerServer will
// result in compilation errors.
type UnsafeWalletManagerServer interface {
	mustEmbedUnimplementedWalletManagerServer()
}

func RegisterWalletManagerServer(s grpc.ServiceRegistrar, srv WalletManagerServer) {
	s.RegisterService(&WalletManager_ServiceDesc, srv)
}

func _WalletManager_ManagerWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletManagerServer).ManagerWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wallet_manager.WalletManager/ManagerWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletManagerServer).ManagerWallet(ctx, req.(*WalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletManager_ServiceDesc is the grpc.ServiceDesc for WalletManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet_manager.WalletManager",
	HandlerType: (*WalletManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ManagerWallet",
			Handler:    _WalletManager_ManagerWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/wallets.proto",
}
